---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Welcome to Astro.">
  <main>
    <h1>
      Welcome to <span class="text-gradient">Auto-Spammer</span>
    </h1>
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1rem;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }

  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
</style>

<script>
  import {
    register,
    registerAll,
    isRegistered,
    unregister,
  } from "@tauri-apps/plugin-global-shortcut";
  import { invoke } from "@tauri-apps/api/core";

  function countOccurences(str: string, char: string): number {
    return str.split(char).length - 1;
  }

  let str = "Hello from Astro";
  let count_to_ignore = 0;

  // await register("o", async () => {
  //   if (count_to_ignore === 0) {
  //     await invoke("type_string", {
  //       string: str,
  //     });
  //     count_to_ignore = countOccurences(str, "o");
  //   } else {
  //     count_to_ignore--;
  //   }
  // });

  // async function handleOKey() {
  //   if (count_to_ignore > 0) {
  //     count_to_ignore--;
  //   } else {
  //     count_to_ignore = countOccurences(str, "o");
  //     await unregister("o");
  //     await new Promise((resolve) => setTimeout(resolve, 100));
  //     await invoke("type_string", {
  //       string: str,
  //     });
  //     await register("o", handleOKey);
  //   }
  // }

  // await register("o", handleOKey);

  let isRegistering = false;

  async function handleOKey() {
    if (isRegistering) {
      return;
    }

    if (count_to_ignore > 0) {
      count_to_ignore--;
    } else {
      count_to_ignore = countOccurences(str, "o");
      isRegistering = true;
      await unregister("o");
      await new Promise((resolve) => setTimeout(resolve, 100));
      await invoke("type_string", {
        string: str,
      });
      await register("o", handleOKey);
      isRegistering = false;
    }
  }

  await register("o", handleOKey);
</script>
