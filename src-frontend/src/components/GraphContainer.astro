---
// This component is the contianer for most of the app
// The cards will be displayed on top of this container
// And will be able to be dragged and dropped on top of this container
---

<svg
  class="graph-container"
  id="graph-container"
  xmlns="http://www.w3.org/2000/svg"
  width="100%"
  height="100%"
>
  <defs>
    <pattern
      id="smallGrid"
      width="10"
      height="10"
      patternUnits="userSpaceOnUse"
    >
      <path d="M 10 0 L 0 0 0 10" fill="none" stroke="gray" stroke-width="0.5"
      ></path>
    </pattern>
    <pattern id="grid" width="100" height="100" patternUnits="userSpaceOnUse">
      <rect width="100" height="100" fill="url(#smallGrid)"></rect>
      <path d="M 100 0 L 0 0 0 100" fill="none" stroke="gray" stroke-width="1"
      ></path>
    </pattern>
  </defs>

  <rect width="100%" height="100%" fill="url(#grid)"></rect>
  <g id="content">
    <slot />
  </g>
</svg>

<style>
  .graph-container {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    overflow: auto;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const svg = document.getElementById(
      "graph-container",
    ) as SVGSVGElement | null;
    const pt: SVGPoint = svg!.createSVGPoint();

    // Initialize the transform attribute
    svg!.setAttribute("transform", "translate(0, 0) scale(1)");

    function cursorPoint(evt: MouseEvent): SVGPoint {
      pt.x = evt.clientX;
      pt.y = evt.clientY;
      return pt.matrixTransform(svg!.getScreenCTM()!.inverse());
    }

    svg!.addEventListener("wheel", function (evt: WheelEvent) {
      evt.preventDefault();

      const newScale: number = evt.deltaY < 0 ? 1.1 : 0.9;

      const currTrans: string | null = svg!.getAttribute("transform");
      const currScale: number = currTrans
        ? parseFloat(currTrans.match(/scale\((.*?)\)/)![1])
        : 1;

      const x: number = cursorPoint(evt).x;
      const y: number = cursorPoint(evt).y;

      const newTrans: string = `translate(${x} ${y}) scale(${newScale * currScale}) translate(${-x} ${-y})`;
      console.log(newTrans);

      svg!.setAttribute("transform", newTrans);
    });
  });
</script>
