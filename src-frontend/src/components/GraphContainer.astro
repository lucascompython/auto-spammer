---
// This component is the contianer for most of the app
// The cards will be displayed on top of this container
// And will be able to be dragged and dropped on top of this container
---

<div class="graph-container" onwheel="handleWheel()">
  <slot />
</div>

<style>
  /* Make graph container occypy the screen below the title */

  .graph-container {
    /* Make graph container occupy the screen below the title */
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    overflow: auto;
    background-color: #282c34; /* Dark background color */
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 20 20'%3E%3Crect width='20' height='20' fill='%23282c34'/%3E%3Cpath d='M20 0v1H0V0h20zm0 5v1H0V5h20zm0 5v1H0v-1h20zm0 5v1H0v-1h20zM0 0h1v20H0V0zm5 0h1v20H-1V0zm5 0h1v20h-1V0zm5 0h1v20h-1V0z' fill='%23333'/%3E%3C/svg%3E"); /* Slightly lighter grid color */
    background-size: 20px 20px;
  }
</style>

<script>
  let isDragging = false;
  let startX: number, startY: number;
  let scale = 1;

  function handleWheel(event: WheelEvent) {
    event.preventDefault();

    // Change scale factor based on wheel delta
    scale += event.deltaY * -0.01;

    // Restrict scale
    scale = Math.min(Math.max(0.125, scale), 4);

    // Apply scale transform
    // @ts-ignore
    event.currentTarget!.style.transform = `scale(${scale})`;
  }

  function handleMouseDown(event: MouseEvent) {
    isDragging = true;
    startX = event.clientX;
    startY = event.clientY;
  }

  function handleMouseMove(event: MouseEvent) {
    if (!isDragging) return;
    const dx = event.clientX - startX;
    const dy = event.clientY - startY;
    // @ts-ignore
    event.currentTarget!.scrollBy(-dx, -dy);
    startX = event.clientX;
    startY = event.clientY;
  }

  function handleMouseUp(event: MouseEvent) {
    isDragging = false;
  }
</script>
